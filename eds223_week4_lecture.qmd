---
title: "eds223_week4_lecture"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
devtools::install_github("robinlovelace/geocompr")
```

```{r}
library(spData)
library(terra)
library(tidyverse)
library(tmap)
library(kableExtra)
library(spData)
library(spDataLarge)
library(geodata)
```

```{r}
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

```

```{r}
zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))
```

```{r}
tm_shape(zion_elevation) +
  tm_raster(title = "Elevation(m)")

tm_shape(zion_land) +
  tm_raster(title = "Land ")
```

```{r}
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
```

```{r}
tm_shape(landsat_3) +
  tm_raster()
```

```{r}
landsat3 <- subset(landsat, "landsat_3")
```

```{r}
global(zion_elevation, mean)
freq(zion_land)
```

## Indexing

```{r}
zion_elevation[1,1] <- 0 
zion_elevation[1]

landsat[1] <- 0
```

```{r}
test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA
```

## Spatial Subsetting
```{r}
# Make a point 
point <- matrix(c(-113, 37.5), ncol = 2)

# Try to extract value 

terra::extract(zion_elevation, point)
```

```{r}
# Create raster to try to trim/clip down to 
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
             resolution = 0.3,
             vals = 1)
```

```{r}
# Clip bigger raster down to smaller one
# Drop = False means it is dropping the geometries, sf is sticky, terra makes it easy to lose geometries 
zion_elevation_clip <- zion_elevation[clip, drop = FALSE]
```

```{r}
# Make two plots
tm_shape(zion_elevation) + 
  tm_raster()

tm_shape(zion_elevation_clip) +
  tm_raster()
```

```{r}
# Create mask raster 

rmask <- zion_elevation

# With masking and booleen rasters you can replace things
rmask[rmask < 2000] <- NA
```

```{r}
# Mask existing ? 
# BRACKET SUBSETTING 

masked1 <- zion_elevation[rmask, drop = FALSE]

#1st. is raster we need to mask, second is raster we are going to mask to.
masked2 <- terra::mask(zion_elevation, rmask)
```

```{r}
tm_shape(masked1) +
  tm_raster()
```

```{r}
# Create matrix to define groups

rcl <- matrix(c(1000, 1500, 1,
                1500, 2000, 2,
                2000, 2500, 3,
                2500, 3000, 4),
              ncol = 3, byrow = TRUE)

reclassify <- terra::classify(zion_elevation, rcl=rcl)
# Update values to be factors
values(reclassify) <- as.factor(values(reclassify))
# Reclasffify means making groups, if it were a data frame we would use something like mutate

```

```{r}
# Make map of reclassify
tm_shape(reclassify) +
  tm_raster()


```

```{r}
# Create a function
# Normalized difference near inferred and red
ndvi_fun <- function(nir, red){
  (nir - red)/(nir+red)
}

# Create raster
# Take value in fourth layer subtract layer in third layer.. then do more math between the layers
ndvi_rast <- lapp(landsat[[c(4,3)]], fun = ndvi_fun)
```

```{r}
tm_shape(ndvi_rast) +
  tm_raster()
```

```{r}
elevation_focal <- focal(zion_elevation,
      w = matrix(1, nrow = 9, ncol= 9), # The neighborhood of cells
      fun = min) 
```

```{r}
tm_shape(elevation_focal) +
  tm_raster()
```

```{r}
# Finding mean
terra::zonal(zion_elevation, reclassify, fun = mean)
```

```{r}
# Get mean elevation across the whole park
terra::global(zion_elevation, mean)
```

### Changing the extent

```{r}
# Learning how to match when there are not the same number of cells
extend <- terra::extend(zion_elevation, c(1, 200))

# Make them match
extend2 <- terra::extend(zion_elevation, extend)

extend + extend2
# They match!
```

### Origin 
```{r}
origin(zion_elevation)
```

### Changing the resolution

```{r}
zion_elevation_coarse <- terra::aggregate(zion_elevation,
                                          fact = 5, 
                                          fun = mean)

# bilinear is how we are estimating new cells
zion_elevation_disagg <- terra::disagg(zion_elevation_coarse,
                                       fact = 5,
                                       method = "bilinear")

if(identical(zion_elevation, zion_elevation_disagg)){
  print("match!")
} else {
  warning("don't match")
}
```

### Resampling 

```{r}
# Create new raster to sample into 
target_rast <- rast(xmin = -133.2, xmax = -112.9,
                    ymin = 37.4, ymax = 37.5,
                    nrow = 450, ncol = 460,
                    crs = crs(zion_elevation))

# Resample into target raster

elevation_resample <- terra::resample(zion_elevation, y = target_rast, method = "bilinear")
```

